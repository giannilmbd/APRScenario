// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// full_scenarios_core
List full_scenarios_core(const arma::cube& big_b, const arma::cube& big_M, const IntegerVector& obs, const NumericVector& path, const IntegerVector& shocks, int h, int n_var, Nullable<arma::vec> g_, Nullable<arma::mat> Sigma_g_);
RcppExport SEXP _APRScenario_full_scenarios_core(SEXP big_bSEXP, SEXP big_MSEXP, SEXP obsSEXP, SEXP pathSEXP, SEXP shocksSEXP, SEXP hSEXP, SEXP n_varSEXP, SEXP g_SEXP, SEXP Sigma_g_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type big_b(big_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type big_M(big_MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type shocks(shocksSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type n_var(n_varSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::vec> >::type g_(g_SEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type Sigma_g_(Sigma_g_SEXP);
    rcpp_result_gen = Rcpp::wrap(full_scenarios_core(big_b, big_M, obs, path, shocks, h, n_var, g_, Sigma_g_));
    return rcpp_result_gen;
END_RCPP
}
// scenarios_core
List scenarios_core(List big_b_list, List big_M_list, List C_hat_list, List D_list, List D_ast_list, List f_hat_list, List Omega_hat_list);
RcppExport SEXP _APRScenario_scenarios_core(SEXP big_b_listSEXP, SEXP big_M_listSEXP, SEXP C_hat_listSEXP, SEXP D_listSEXP, SEXP D_ast_listSEXP, SEXP f_hat_listSEXP, SEXP Omega_hat_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type big_b_list(big_b_listSEXP);
    Rcpp::traits::input_parameter< List >::type big_M_list(big_M_listSEXP);
    Rcpp::traits::input_parameter< List >::type C_hat_list(C_hat_listSEXP);
    Rcpp::traits::input_parameter< List >::type D_list(D_listSEXP);
    Rcpp::traits::input_parameter< List >::type D_ast_list(D_ast_listSEXP);
    Rcpp::traits::input_parameter< List >::type f_hat_list(f_hat_listSEXP);
    Rcpp::traits::input_parameter< List >::type Omega_hat_list(Omega_hat_listSEXP);
    rcpp_result_gen = Rcpp::wrap(scenarios_core(big_b_list, big_M_list, C_hat_list, D_list, D_ast_list, f_hat_list, Omega_hat_list));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_APRScenario_full_scenarios_core", (DL_FUNC) &_APRScenario_full_scenarios_core, 9},
    {"_APRScenario_scenarios_core", (DL_FUNC) &_APRScenario_scenarios_core, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_APRScenario(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
